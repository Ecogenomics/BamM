CC = gcc

LIBHTS_CPPFLAGS = @LIBHTS_CPPFLAGS@
LIBHTS_LDFLAGS = @LIBHTS_LDFLAGS@
LIBHTS_LIBS = @LIBHTS_LIBS@
LIBHTS_LIB_DIR = @LIBHTS_LIB_DIR@

LIBCFU_CPPFLAGS = @LIBCFU_CPPFLAGS@
LIBCFU_LDFLAGS = @LIBCFU_LDFLAGS@
LIBCFU_LIBS = @LIBCFU_LIBS@
LIBCFU_LIB_DIR = @LIBCFU_LIB_DIR@

CFLAGS = -std=gnu99 -g -fPIC -pthread -O2 -Wall $(LIBHTS_CPPFLAGS) $(LIBCFU_CPPFLAGS)
#LIB_FLAGS = -static-libgcc -shared -Wl,-rpath,$(LIBHTS_LIB_DIR),-soname,libBamM.so.0
LIB_FLAGS = -static-libgcc -shared -Wl,-rpath,$(LIBHTS_LIB_DIR)
LIBS =  -lm $(LIBCFU_LDFLAGS) $(LIBCFU_LIBS) $(LIBHTS_LDFLAGS) $(LIBHTS_LIBS)

HTS_DIR = htslib-1.3.1
CFU_DIR = libcfu-0.03
BMM_LIB = libBamM.a

LIBBAMM_SOURCES = bamExtractor.c bamParser.c pairedLink.c bamRead.c coverageEstimators.c stats.c bamFilter.c bamProfiler.c
LIBBAMM_OBJS = bamExtractor.o bamParser.o pairedLink.o bamRead.o coverageEstimators.o stats.o bamFilter.o bamProfiler.o

all: lib_only

.SUFFIXES: .c .o

.c.o:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

$(BMM_LIB) : $(LIBBAMM_OBJS)
	@-rm -f $@
	$(CC) $(CFLAGS) $(LIB_FLAGS) -o $@ $(LIBBAMM_SOURCES) $(LIBS)

lib_only: $(BMM_LIB)
	@echo "Building BamM library"

clean:
	rm -f *.o
	rm -f $(BMM_LIB)
